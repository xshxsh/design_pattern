命令模式（Command Pattern）是一种行为型设计模式，又叫动作模式或事务模式。它将请求（命令）封装成对象，使得可以用不同的请求对客户端进行参数化，具体的请求可以在运行时更改、排队或记录，它讲发出者和接收者解耦（顺序：发出者-->命令-->接收者）
本质：封装请求

角色组成：
抽象命令（Command）：命令是一个抽象接口，定义了执行操作的统一方法。具体的命令类会实现这个接口，并提供执行相应操作的具体逻辑。
具体命令（Concrete Command）：具体命令类实现了抽象命令，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。
接收者（Receiver）：执行实际命令的类，命令对象会调用接收者的方法来执行请求。
调用者（Invoker）：持有命令对象，通常是多个，并通过访问命令对象来执行相关请求，他不直接访问接收者。

应用场景：
1、餐厅点餐：在一家餐厅中，服务员充当调用者，厨师充当接收者，菜品可以作为具体命令。当顾客想点菜时，服务员会将顾客的需求封装成一个命令对象，并传递给厨师。厨师根据命令对象中的信息来完成相应的烹饪工作。这样，顾客和厨师之间不需要直接沟通，而是通过命令对象来实现点餐和烹饪的解耦。

2、遥控器控制家电：拿电视遥控器举例，遥控器是调用者，电视是接收者。每个按键都可以看作是一个具体命令，例如音量加、音量减、切换频道等。当用户按下某个按键时，遥控器会发送相应的命令给电视，然后电视根据命令执行相应的操作，如增加音量、减小音量或切换频道。

Runnable接口：Java中的Runnable接口就是一个典型的命令模式的应用。Runnable接口封装了需要执行的任务，然后可以交给线程去执行。
Timer和TimerTask类：这两个类用于定时任务调度，TimerTask类封装了要执行的任务，然后由Timer类作为调用者执行这些任务。
Statement接口：在Java中与数据库交互时，SQL语句被封装成Statement对象，然后由数据库驱动程序执行相应的命令。


这里已餐厅点菜为例