策略（Strategy）模式的定义：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。
简单来说，就是替代多个if-else的情况。
优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。
缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露（故此通常跟工厂模式结合使用）。

策略模式的主要角色如下。
抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。
具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。
环境（Context）类：持有一个策略类的引用，最终给客户端调用。


适用场景：
1. 旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略
2. 支付方式，付款时可以用支付宝、微信、银行卡
3. 用猪肉做一道菜，可以清蒸、红烧、焖、煮
4. 同一个输入数据，根据不同的算法，可以有不同的输出